{"ast":null,"code":"var _s = $RefreshSig$();\n//axios 기본 제공 모듈이 아니라, 직접 정의한 것을 불러와야됨\nimport axios from \"../api/axios\";\nimport React, { useState, useEffect } from \"react\";\nimport requests from \"../api/requests\";\nimport \"./Banner.css\";\nexport default function Banner() {\n  _s();\n  const [movie, setMovie] = useState([]);\n  const [isClicked, setIsClicked] = useState(false);\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = async () => {\n    //현재 상영중인 영화 정보 가져오기(여러 영화) - \n    const request = await axios.get(requests.fetchNowPlaying);\n    console.log(request);\n    const movieId = request.data.results[\n    //Math.random => 0~1 사이의 무작위값, Math.floor => 내림 함수(작거나 같은 것 중 가장 큰 정수 반환)\n    // 0~가져온 영화 수 사이의 랜덤 정수 \n    Math.floor(Math.random() * request.data.results.length)].id;\n    const {\n      data: movieDetail\n    } = await axios.get(`movie/${movieId}`, {\n      params: {\n        append_to_response: \"video\"\n      }\n    });\n    setMovie(movieDetail);\n  };\n  if (isClicked) {}\n}\n_s(Banner, \"R9stJPTA5NGL+iZVozDaQaKtmNg=\");\n_c = Banner;\nvar _c;\n$RefreshReg$(_c, \"Banner\");","map":{"version":3,"names":["axios","React","useState","useEffect","requests","Banner","_s","movie","setMovie","isClicked","setIsClicked","fetchData","request","get","fetchNowPlaying","console","log","movieId","data","results","Math","floor","random","length","id","movieDetail","params","append_to_response","_c","$RefreshReg$"],"sources":["/Users/gupark/Desktop/Groomthon_Training_week1/react_neflix_clone/src/components/Banner.js"],"sourcesContent":["//axios 기본 제공 모듈이 아니라, 직접 정의한 것을 불러와야됨\nimport axios from \"../api/axios\";\nimport React, { useState, useEffect } from \"react\";\nimport requests from \"../api/requests\";\nimport \"./Banner.css\"\n\nexport default function Banner() {\n    const [movie, setMovie] = useState([]);\n    const [isClicked, setIsClicked] = useState(false);\n\n    useEffect(() => {\n        fetchData();\n    }, [])\n\n    const fetchData = async () => {\n        //현재 상영중인 영화 정보 가져오기(여러 영화) - \n        const request = await axios.get(requests.fetchNowPlaying);\n        console.log(request);\n        const movieId = request.data.results[\n            //Math.random => 0~1 사이의 무작위값, Math.floor => 내림 함수(작거나 같은 것 중 가장 큰 정수 반환)\n            // 0~가져온 영화 수 사이의 랜덤 정수 \n            Math.floor(Math.random() * request.data.results.length)\n        ].id;\n\n        const { data: movieDetail } = await axios.get(`movie/${movieId}`, {params: {append_to_response: \"video\"}, });\n        setMovie(movieDetail);\n    }\nif (isClicked){\n\n\n\n}\n\n\n}\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,cAAc;AAChC,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,iBAAiB;AACtC,OAAO,cAAc;AAErB,eAAe,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAEjDC,SAAS,CAAC,MAAM;IACZQ,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC1B;IACA,MAAMC,OAAO,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAACT,QAAQ,CAACU,eAAe,CAAC;IACzDC,OAAO,CAACC,GAAG,CAACJ,OAAO,CAAC;IACpB,MAAMK,OAAO,GAAGL,OAAO,CAACM,IAAI,CAACC,OAAO;IAChC;IACA;IACAC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGV,OAAO,CAACM,IAAI,CAACC,OAAO,CAACI,MAAM,CAAC,CAC1D,CAACC,EAAE;IAEJ,MAAM;MAAEN,IAAI,EAAEO;IAAY,CAAC,GAAG,MAAMzB,KAAK,CAACa,GAAG,CAAE,SAAQI,OAAQ,EAAC,EAAE;MAACS,MAAM,EAAE;QAACC,kBAAkB,EAAE;MAAO;IAAG,CAAC,CAAC;IAC5GnB,QAAQ,CAACiB,WAAW,CAAC;EACzB,CAAC;EACL,IAAIhB,SAAS,EAAC,CAId;AAGA;AAACH,EAAA,CA5BuBD,MAAM;AAAAuB,EAAA,GAANvB,MAAM;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}