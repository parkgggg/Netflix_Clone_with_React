{"ast":null,"code":"var _jsxFileName = \"/Users/gupark/Desktop/Groomthon_Training_week1/react_neflix_clone/src/components/Row.js\",\n  _s = $RefreshSig$();\nimport React, { lazy, useEffect, useState } from \"react\";\nimport axios from \"../api/axios\";\nimport \"./Row.css\";\nimport MovieModal from \"./MovieModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Row({\n  isLargeRow,\n  title,\n  id,\n  fetchUrl\n}) {\n  _s();\n  //영화들 담을 State\n  const [movies, setMovies] = useState([]);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [movieSelected, setMovieSelection] = useState({});\n\n  //컴포넌트가 렌더링 될 때 마다 작업을 반복하게 해주는 hook\n  useEffect(() => {\n    // 새로 렌더링 되면 영화 데이터를 새로 가져온다\n    fetchMovieData();\n  }, []);\n\n  // 비동기로 tmdb API를 사용해 영화 데이터 get\n  const fetchMovieData = async () => {\n    const request = await axios.get(fetchUrl);\n    //가져온 데이터는 movies state로\n    console.log(request.data.results);\n    setMovies(request.data.results);\n    console.log(movies);\n  };\n  const handleClick = movie => {\n    setModalOpen(true);\n    setMovieSelection(movie);\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slider\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider__arrow-left\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"arrow\",\n          onClick: () => {\n            document.getElementById(id).scrollLeft -= window.innerWidth - 80;\n          },\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: id,\n        className: \"row__posters\",\n        children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n          className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n          src: `https://image.tmdb.org/t/p/original/${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n          loading: \"lazy\",\n          alt: movie.name,\n          onClick: () => handleClick(movie)\n        }, \"{movie.id}\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider__arrow-right\",\n        onClick: () => {\n          document.getElementById(id).scrollLeft += window.innerWidth - 80;\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"arrow\",\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), modalOpen && /*#__PURE__*/_jsxDEV(MovieModal, {\n      ...movieSelected,\n      setModalOpen: setModalOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(Row, \"C6zEVW6C5+hU+cKkOdiS98e57I8=\");\n_c = Row;\nvar _c;\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"names":["React","lazy","useEffect","useState","axios","MovieModal","jsxDEV","_jsxDEV","Row","isLargeRow","title","id","fetchUrl","_s","movies","setMovies","modalOpen","setModalOpen","movieSelected","setMovieSelection","fetchMovieData","request","get","console","log","data","results","handleClick","movie","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","document","getElementById","scrollLeft","window","innerWidth","map","src","poster_path","backdrop_path","loading","alt","name","_c","$RefreshReg$"],"sources":["/Users/gupark/Desktop/Groomthon_Training_week1/react_neflix_clone/src/components/Row.js"],"sourcesContent":["import React, { lazy, useEffect, useState } from \"react\";\nimport axios from \"../api/axios\";\nimport \"./Row.css\";\nimport MovieModal from \"./MovieModal\";\n\nexport default function Row({ isLargeRow, title, id, fetchUrl }) {\n  //영화들 담을 State\n  const [movies, setMovies] = useState([]);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [movieSelected, setMovieSelection] = useState({});\n\n  //컴포넌트가 렌더링 될 때 마다 작업을 반복하게 해주는 hook\n  useEffect(() => {\n    // 새로 렌더링 되면 영화 데이터를 새로 가져온다\n    fetchMovieData();\n  }, []);\n\n  // 비동기로 tmdb API를 사용해 영화 데이터 get\n  const fetchMovieData = async () => {\n    const request = await axios.get(fetchUrl);\n    //가져온 데이터는 movies state로\n    console.log(request.data.results);\n\n    setMovies(request.data.results);\n    console.log(movies);\n  };\n\n  const handleClick = (movie) => {\n    setModalOpen(true);\n    setMovieSelection(movie);\n  };\n\n  return (\n    <section>\n      <h2>{title}</h2>\n      <div className=\"slider\">\n        {/* 왼쪽으로 슬라이드*/}\n        <div className=\"slider__arrow-left\">\n          {/* scrollLeft = 요소의 수평 스크롤 바 위치*/}\n          {/* 얼만큼씩 이동할 지는 만드는 사람 마음 => 지금은 window의 innerwidth - 80 만큼씩*/}\n          <span\n            className=\"arrow\"\n            onClick={() => {\n              document.getElementById(id).scrollLeft -= window.innerWidth - 80;\n            }}\n          >\n            {\"<\"}\n          </span>{\" \"}\n          {/*브라켓에 안 넣으면 <, >는 에러 발생*/}\n        </div>\n\n        <div id={id} className=\"row__posters\">\n          {/*map을 사용해서 <img> 나열*/}\n          {movies.map((movie) => (\n            <img\n              key=\"{movie.id}\"\n              className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n              src={`https://image.tmdb.org/t/p/original/${\n                isLargeRow ? movie.poster_path : movie.backdrop_path\n              }`}\n              loading=\"lazy\"\n              alt={movie.name}\n              onClick={() => handleClick(movie)}\n            />\n          ))}\n        </div>\n\n        {/* 오른쪽으로 슬라이드*/}\n        <div\n          className=\"slider__arrow-right\"\n          onClick={() => {\n            document.getElementById(id).scrollLeft += window.innerWidth - 80;\n          }}\n        >\n          <span className=\"arrow\">{\">\"}</span>\n        </div>\n      </div>\n      {modalOpen && (\n        <MovieModal {...movieSelected} setModalOpen={setModalOpen} />\n      )}\n    </section>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}