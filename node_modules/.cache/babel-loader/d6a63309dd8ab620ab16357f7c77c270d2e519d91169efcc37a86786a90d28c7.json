{"ast":null,"code":"var _jsxFileName = \"/Users/gupark/Desktop/All_Project_By_GroomThon/Neflix_with_React/src/components/Row.js\",\n  _s = $RefreshSig$();\nimport React, { lazy, useEffect, useState } from \"react\";\nimport axios from \"../api/axios\";\nimport \"./Row.css\";\nimport MovieModal from \"./MovieModal\";\nimport { Navigation, Pagination, Scrollbar, A11y } from \"swiper/modules\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\nimport \"swiper/css\";\nimport \"swiper/css/navigation\";\nimport \"swiper/css/pagination\";\nimport \"swiper/css/scrollbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Row({\n  isLargeRow,\n  title,\n  id,\n  fetchUrl\n}) {\n  _s();\n  //영화들 담을 State\n  const [movies, setMovies] = useState([]);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [movieSelected, setMovieSelection] = useState({});\n\n  //컴포넌트가 처음 렌더링 될 때 실행할 작업\n  //(의존성 배열을 빈배열로 넣으면 처음 렌더링 할 때만, 렌더링 될 때마다 실행하고 싶으면 두 번째 인자를 아예 비워놓으면 된다.)\n  useEffect(() => {\n    // 새로 렌더링 되면 영화 데이터를 새로 가져온다\n    fetchMovieData();\n  }, []);\n\n  // 비동기로 tmdb API를 사용해 영화 데이터 get\n  const fetchMovieData = async () => {\n    const request = await axios.get(fetchUrl);\n    //가져온 데이터는 movies state로\n    setMovies(request.data.results);\n  };\n  const handleClick = movie => {\n    setModalOpen(true);\n    setMovieSelection(movie);\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Swiper, {\n      modules: [Navigation, Pagination, Scrollbar, A11y],\n      navigation: true,\n      pagination: {\n        clickable: true\n      },\n      loop: true,\n      breakpoints: {\n        1378: {\n          slidesPerView: 6,\n          slidesPerGroup: 6\n        },\n        998: {\n          slidesPerView: 5,\n          slidesPerGroup: 5\n        },\n        625: {\n          slidesPerView: 4,\n          slidesPerGroup: 4\n        },\n        0: {\n          slidesPerView: 3,\n          slidesPerGroup: 3\n        }\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: id,\n        className: \"row__posters\",\n        children: movies.map(movie => /*#__PURE__*/_jsxDEV(SwiperSlide, {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n            src: `https://image.tmdb.org/t/p/original/${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n            loading: \"lazy\",\n            alt: movie.name,\n            onClick: () => handleClick(movie)\n          }, movie.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), modalOpen && /*#__PURE__*/_jsxDEV(MovieModal, {\n      ...movieSelected,\n      setModalOpen: setModalOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(Row, \"C6zEVW6C5+hU+cKkOdiS98e57I8=\");\n_c = Row;\nvar _c;\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"names":["React","lazy","useEffect","useState","axios","MovieModal","Navigation","Pagination","Scrollbar","A11y","Swiper","SwiperSlide","jsxDEV","_jsxDEV","Row","isLargeRow","title","id","fetchUrl","_s","movies","setMovies","modalOpen","setModalOpen","movieSelected","setMovieSelection","fetchMovieData","request","get","data","results","handleClick","movie","children","fileName","_jsxFileName","lineNumber","columnNumber","modules","navigation","pagination","clickable","loop","breakpoints","slidesPerView","slidesPerGroup","className","map","src","poster_path","backdrop_path","loading","alt","name","onClick","_c","$RefreshReg$"],"sources":["/Users/gupark/Desktop/All_Project_By_GroomThon/Neflix_with_React/src/components/Row.js"],"sourcesContent":["import React, { lazy, useEffect, useState } from \"react\";\nimport axios from \"../api/axios\";\nimport \"./Row.css\";\nimport MovieModal from \"./MovieModal\";\n\nimport { Navigation, Pagination, Scrollbar, A11y } from \"swiper/modules\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\n\nimport \"swiper/css\";\nimport \"swiper/css/navigation\";\nimport \"swiper/css/pagination\";\nimport \"swiper/css/scrollbar\";\n\nexport default function Row({ isLargeRow, title, id, fetchUrl }) {\n  //영화들 담을 State\n  const [movies, setMovies] = useState([]);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [movieSelected, setMovieSelection] = useState({});\n\n  //컴포넌트가 처음 렌더링 될 때 실행할 작업\n  //(의존성 배열을 빈배열로 넣으면 처음 렌더링 할 때만, 렌더링 될 때마다 실행하고 싶으면 두 번째 인자를 아예 비워놓으면 된다.)\n  useEffect(() => {\n    // 새로 렌더링 되면 영화 데이터를 새로 가져온다\n    fetchMovieData();\n  }, []);\n\n  // 비동기로 tmdb API를 사용해 영화 데이터 get\n  const fetchMovieData = async () => {\n    const request = await axios.get(fetchUrl);\n    //가져온 데이터는 movies state로\n    setMovies(request.data.results);\n  };\n\n  const handleClick = (movie) => {\n    setModalOpen(true);\n    setMovieSelection(movie);\n  };\n\n  return (\n    <section>\n      <h2>{title}</h2>\n      <Swiper\n        modules={[Navigation, Pagination, Scrollbar, A11y]}\n        navigation\n        pagination={{ clickable: true }}\n        loop={true}\n        breakpoints={{\n          1378: {\n            slidesPerView: 6,\n            slidesPerGroup: 6,\n          },\n          998: {\n            slidesPerView: 5,\n            slidesPerGroup: 5,\n          },\n          625: {\n            slidesPerView: 4,\n            slidesPerGroup: 4,\n          },\n          0: {\n            slidesPerView: 3,\n            slidesPerGroup: 3,\n          },\n        }}\n      >\n        <div id={id} className=\"row__posters\">\n          {/*map을 사용해서 <img> 나열*/}\n          {movies.map((movie) => (\n            <SwiperSlide>\n              <img\n                key={movie.id}\n                className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                src={`https://image.tmdb.org/t/p/original/${\n                  isLargeRow ? movie.poster_path : movie.backdrop_path\n                }`}\n                loading=\"lazy\"\n                alt={movie.name}\n                onClick={() => handleClick(movie)}\n              />\n            </SwiperSlide>\n          ))}\n        </div>\n      </Swiper>\n\n      {modalOpen && (\n        <MovieModal {...movieSelected} setModalOpen={setModalOpen} />\n      )}\n    </section>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}